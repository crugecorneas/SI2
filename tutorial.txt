tar -czvf server server/
scp -P 22022 ./server si2@localhost:/home/si2
tar -xvf server
sudo nano /etc/systemd/system/gunicorn.service


Conexión a máquina virtual 1:
poner este comando: createdb –U alumnodb voto

Conexión MV2:
ssh si2@localhost -p 22022
mkdir -p /home/si2/repo
cd /home/si2/repo
git init --bare p1base.git -b main



python3 -m venv p1_env
source p1_env/bin/activate
pip install -r SI2/P1/P1-base/requirements.txt

python3 manage.py makemigrations
python3 manage.py migrate
python3 manage.py runserver 8001




comandos gunicorn:
sudo systemctl status gunicorn
sudo systemctl restart gunicorn
sudo systemctl daemon-reload


comandos de git:
forzar los cambios a tu vm2:
git push -u vm2 main --force

obtener la ultima version del git.com con conflictos:
git fetch origin
git reset --hard origin/main
 git pull origin main


Accede a PostgreSQL como usuario postgres:

sudo -u postgres psql
Dentro de psql, ejecuta:


3️⃣ Crear la base de datos y el usuario
-- Crear el usuario 'alumnodb' con contraseña 'alumnodb'
CREATE USER alumnodb WITH PASSWORD 'alumnodb';

-- Crear la base de datos 'voto' y asignarle el propietario 'alumnodb'
CREATE DATABASE voto OWNER alumnodb;

-- Dar privilegios al usuario sobre la base de datos
GRANT ALL PRIVILEGES ON DATABASE voto TO alumnodb;

4️⃣ Probar la conexión
Ejecuta:

psql -h localhost -p 15432 -U alumnodb -d voto

servicio Puerto Host Puerto VM
ssh 12022 22
apache 18080 80
postgresql 15432 5432
gunicorn 18000 8000
rabbitmq 15672 5672


sudo nano /etc/systemd/system/gunicorn.service

[Unit]
Description=Gunicorn WSGI Application Server
After=network.target
[Service]
User=si2
Group=si2
WorkingDirectory=/home/si2/repo/<nombre-del-proyecto>
Environment="PATH=/home/si2/venv/bin"
ExecStart=/home/si2/venv/bin/gunicorn \
--workers 1 \
--bind 0.0.0.0:8000 \
votoSite.wsgi:application
ExecReload=/bin/kill -s HUP $MAINPID
KillMode=mixed
TimeoutStopSec=5
PrivateTmp=true
[Install]
WantedBy=multi-user.target


sudo nano /etc/apache2/sites-available/000-default.conf

sudo a2enmod proxy
sudo a2enmod proxy_http
sudo a2enmod proxy_balancer
sudo a2enmod lbmethod_byrequests
sudo a2enmod headers


sudo apachectl configtest
journalctl -xeu apache2.service
sudo tail -n 50 /var/log/apache2/error.log


ProxyRequests Off

<Proxy balancer://SI2Cluster>
  # Miembros del cluster (instancias de la app Django)
  BalancerMember http://10.250.1.7:18000 route=Instance01
  BalancerMember http://10.250.1.7:28000 route=Instance02
  BalancerMember http://10.250.1.7:38000 route=Instance03

  # Habilitar sticky session con la cookie ROUTEID
  ProxySet stickysession=ROUTEID
</Proxy>

Header add Set-Cookie "ROUTEID=%{BALANCER_WORKER_ROUTE}e; path=/" env=BALANCER_ROUTE_CHANGED

# Configurar la ubicación para balanceo de carga
<Location /P1base>
  Require all granted
  ProxyPass balancer://SI2Cluster
  ProxyPassReverse balancer://SI2Cluster
</Location>

# Configuración del administrador del balanceador de carga
<Location /balancer-manager>
  SetHandler balancer-manager
</Location>

# Configuración para manejar las redirecciones de Django correctamente
RewriteEngine On
# Redirecciones con /P1base se manejen correctamente
RewriteCond %{REQUEST_URI} !^/P1base
RewriteCond %{REQUEST_URI} !^/balancer-manager
RewriteRule ^(.*)$ /P1base$1 [R,L]

# Ajustar encabezado Location para evitar afectaciones
Header edit Location ^/(?!balancer-manager)([^/]) /P1base/$1

# Definir el nombre del servidor (ajústalo según tu configuración
ServerName localhost:80
